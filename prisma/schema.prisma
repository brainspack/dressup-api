generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        RoleName @unique
  permissions Json
  users       User[]
}

model User {
  id           String    @id @default(uuid())
  name         String?
  mobileNumber String    @unique
  language     Language  @default(HI)
  createdAt    DateTime  @default(now())
  otp          String?
  otpExpiresAt DateTime?
  roleId       Int
  refreshToken String?
  shops        Shop[]    @relation("ShopOwnerRelation")
  role         Role      @relation(fields: [roleId], references: [id])

  @@map("users")
}

model Shop {
  id           String     @id @default(uuid())
  name         String
  ownerId      String
  address      String     @default("")
  createdAt    DateTime   @default(now())
  isActive     Boolean    @default(true)
  phone        String     @unique @default("")
  deletedAt    DateTime?
  serialNumber Int        @unique @default(autoincrement())
  customers    Customer[]
  orders       Order[]
  payments     Payment[]
  owner        User       @relation("ShopOwnerRelation", fields: [ownerId], references: [id])
  tailors      Tailor[]

  @@map("shops")
}

model Tailor {
  id           String       @id @default(uuid())
  name         String
  mobileNumber String       @unique
  shopId       String
  deletedAt    DateTime?
  serialNumber Int          @unique @default(autoincrement())
  address      String?
  status       TailorStatus @default(INACTIVE)
  shop         Shop         @relation(fields: [shopId], references: [id])

  @@map("tailors")
}

model Customer {
  id           String        @id @default(uuid())
  name         String
  mobileNumber String        @unique
  address      String?
  createdAt    DateTime      @default(now())
  shopId       String
  deletedAt    DateTime?
  serialNumber Int           @unique @default(autoincrement())
  shop         Shop          @relation(fields: [shopId], references: [id])
  measurements Measurement[]
  orders       Order[]

  @@map("customers")
}

model Measurement {
  id           String    @id @default(uuid())
  customerId   String
  height       Float?
  chest        Float?
  waist        Float?
  hip          Float?
  shoulder     Float?
  sleeveLength Float?
  inseam       Float?
  neck         Float?
  createdAt    DateTime  @default(now())
  orderId      String?
  deletedAt    DateTime?
  clothId      String    @unique
  ankle        Float?
  armhole      Float?
  bicep        Float?
  calf         Float?
  knee         Float?
  outseam      Float?
  thigh        Float?
  wrist        Float?
  cloth        Cloth     @relation(fields: [clothId], references: [id])
  customer     Customer  @relation(fields: [customerId], references: [id])
  order        Order?    @relation(fields: [orderId], references: [id])

  @@map("measurements")
}

model Order {
  id           String        @id @default(uuid())
  customerId   String
  shopId       String
  tailorName   String?
  tailorNumber String?
  status       OrderStatus   @default(PENDING)
  orderType    OrderType     @default(STITCHING)
  notes        String?
  createdAt    DateTime      @default(now())
  deliveryDate DateTime?
  orderDate    DateTime      @default(now())
  deletedAt    DateTime?
  serialNumber Int           @unique @default(autoincrement())
  assignedAt   DateTime?
  assignedTo   String?
  totalAmount  Float?
  alterationPrice Float?
  clothes      Cloth[]
  costs        Cost[]
  measurements Measurement[]
  customer     Customer      @relation(fields: [customerId], references: [id])
  shop         Shop          @relation(fields: [shopId], references: [id])
  payments     Payment[]

  @@map("orders")
}

model Cloth {
  id           String       @id @default(uuid())
  orderId      String
  type         String
  color        String?
  fabric       String?
  designNotes  String?
  imageUrls    String[]
  videoUrls    String[]
  createdAt    DateTime     @default(now())
  materialCost Float?
  price        Float?
  imageData    String[]
  order        Order        @relation(fields: [orderId], references: [id])
  measurements Measurement?

  @@map("cloths")
}

model Cost {
  id           String @id @default(uuid())
  orderId      String
  materialCost Float
  laborCost    Float
  totalCost    Float
  order        Order  @relation(fields: [orderId], references: [id])

  @@map("cost")
}

model Payment {
  id        String   @id @default(uuid())
  shopId    String
  orderId   String
  amount    Float
  paidAt    DateTime @default(now())
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id])
  shop      Shop     @relation(fields: [shopId], references: [id])

  @@index([shopId, paidAt])
  @@map("payments")
}

enum Language {
  EN
  HI
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  DELIVERED
  CANCELLED
}

enum OrderType {
  STITCHING
  ALTERATION
}

enum RoleName {
  SUPER_ADMIN
  SHOP_OWNER
}

enum TailorStatus {
  INACTIVE
  ACTIVE
}
